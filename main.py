import os
import logging
import wikipedia
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    ContextTypes,
    filters,
)

# ---------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")  # —Ç–æ–∫–µ–Ω –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è
SUMMARY_SENTENCES = 5  # —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
LOG_FILE = "logs.txt"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞
if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render!")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —è–∑—ã–∫–∞ –í–∏–∫–∏–ø–µ–¥–∏–∏
wikipedia.set_lang("ru")

# ---------------- –õ–û–ì–ò ----------------
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler(LOG_FILE, encoding="utf-8"),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ---------------- –ö–û–ú–ê–ù–î–´ ----------------
async def start_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_html(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –∏—â–µ—Ç —Å—Ç–∞—Ç—å–∏ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏.\n"
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∑–∞–ø—Ä–æ—Å, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n<i>–ö–≤–∞–Ω—Ç–æ–≤–∞—è –∑–∞–ø—É—Ç–∞–Ω–Ω–æ—Å—Ç—å</i>"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û—Ç–ø—Ä–∞–≤—å —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞ ‚Äî —è –ø–æ–∫–∞–∂—É –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏.")

# ---------------- –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê ----------------
async def handle_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.strip()
    if not query:
        return

    try:
        summary = wikipedia.summary(query, sentences=SUMMARY_SENTENCES)
    except wikipedia.exceptions.DisambiguationError as e:
        options = "\n".join(e.options[:5])
        await update.message.reply_text(f"‚ùó –ó–∞–ø—Ä–æ—Å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–µ–Ω. –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n{options}")
        return
    except wikipedia.exceptions.PageError:
        await update.message.reply_text("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏.")
        return
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ç—å–∏: {e}")
        await update.message.reply_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ç—å–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    context.user_data["article"] = {
        "text": summary,
        "offset": 0
    }

    await send_article(update, context)

# ---------------- –ü–ê–ì–ò–ù–ê–¶–ò–Ø ("–ï—â—ë") ----------------
async def send_article(update, context):
    article = context.user_data.get("article", {})
    text = article.get("text", "")
    offset = article.get("offset", 0)
    chunk_size = 1000

    part = text[offset:offset + chunk_size]
    buttons = []

    if offset + chunk_size < len(text):
        context.user_data["article"]["offset"] = offset + chunk_size
        buttons.append([InlineKeyboardButton("–ï—â—ë", callback_data="more")])

    markup = InlineKeyboardMarkup(buttons) if buttons else None

    if hasattr(update, "message") and update.message:
        await update.message.reply_text(part, reply_markup=markup)
    else:
        await update.callback_query.message.reply_text(part, reply_markup=markup)

async def callback_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await send_article(query, context)

# ---------------- –ì–õ–ê–í–ù–ê–Ø ----------------
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start_cmd))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_query))
    app.add_handler(CallbackQueryHandler(callback_handler))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –∂–¥—É –∑–∞–ø—Ä–æ—Å–æ–≤ –≤ Telegram...")
    app.run_polling()

if __name__ == "__main__":
    main()