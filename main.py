import os
import logging
import wikipedia
from telegram import (
    Update,
    InlineQueryResultArticle,
    InputTextMessageContent,
)
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    InlineQueryHandler,
)
from uuid import uuid4
import hashlib

# ---------------- –ù–ê–°–¢–†–û–ô–ö–ò ----------------
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN")
if not TELEGRAM_TOKEN:
    raise RuntimeError("‚ùå TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –î–æ–±–∞–≤—å –µ–≥–æ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Render!")

wikipedia.set_lang("ru")
SUMMARY_SENTENCES = 3  # —Å–∫–æ–ª—å–∫–æ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –≤ —Å–Ω–∏–ø–ø–µ—Ç–µ

# ---------------- –õ–û–ì–ò ----------------
logging.basicConfig(
    format="%(asctime)s - %(levelname)s - %(message)s",
    level=logging.INFO,
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger(__name__)

# ---------------- –ö–û–ú–ê–ù–î–´ ----------------
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_html(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏.\n"
        "–ß—Ç–æ–±—ã –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –º–Ω–æ–π, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –≤ –ª—é–±–æ–º —á–∞—Ç–µ:\n"
        "<code>@ishaSearch_bot [—Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å]</code>\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n<code>@ishaSearch_bot —Ç–µ–æ—Ä–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏</code>"
    )

async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏: @ishaSearch_bot [—Ç–≤–æ–π –∑–∞–ø—Ä–æ—Å]\n\n"
        "–Ø –ø–æ–∫–∞–∂—É –∫—Ä–∞—Ç–∫–æ–µ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ —Å—Ç–∞—Ç—å–∏ –∏–∑ –í–∏–∫–∏–ø–µ–¥–∏–∏ üìò"
    )

# ---------------- INLINE –ü–û–ò–°–ö ----------------
async def inline_query(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.inline_query.query.strip()

    if not query:
        return

    user = update.inline_query.from_user
    logger.info(f"üîç {user.first_name} –∏—â–µ—Ç: {query}")

    # –°–∏–º—É–ª—è—Ü–∏—è "–ø–µ—á–∞—Ç–∏"
    await context.bot.send_chat_action(chat_id=update.inline_query.from_user.id, action="typing")

    try:
        summary = wikipedia.summary(query, sentences=SUMMARY_SENTENCES)
        # –°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ–ª–Ω—É—é —Å—Ç–∞—Ç—å—é
        page_url = wikipedia.page(query).url
        summary += f"\n\nüîó [–û—Ç–∫—Ä—ã—Ç—å –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏]({page_url})"
    except wikipedia.exceptions.DisambiguationError as e:
        summary = "‚ùó –ó–∞–ø—Ä–æ—Å –Ω–µ–æ–¥–Ω–æ–∑–Ω–∞—á–µ–Ω. –í–æ–∑–º–æ–∂–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã:\n" + "\n".join(e.options[:5])
    except wikipedia.exceptions.PageError:
        summary = "‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ –í–∏–∫–∏–ø–µ–¥–∏–∏."
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ç—å–∏")
        summary = "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —Å—Ç–∞—Ç—å–∏."

    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π ID –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    result_id = hashlib.md5(query.encode()).hexdigest()

    results = [
        InlineQueryResultArticle(
            id=result_id,
            title=f"–†–µ–∑—É–ª—å—Ç–∞—Ç: {query}",
            input_message_content=InputTextMessageContent(
                f"üìò *{query}*\n\n{summary}",
                parse_mode="Markdown"
            ),
            description=summary[:100] + "..." if len(summary) > 100 else summary
        )
    ]

    # cache_time —É–≤–µ–ª–∏—á–µ–Ω, —á—Ç–æ–±—ã Telegram –Ω–µ –¥–µ–ª–∞–ª –ø–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    await update.inline_query.answer(results, cache_time=60)

# ---------------- –ì–õ–ê–í–ù–ê–Ø ----------------
def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(InlineQueryHandler(inline_query))

    logger.info("üöÄ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∏ –∂–¥—ë—Ç inline-–∑–∞–ø—Ä–æ—Å–æ–≤...")
    app.run_polling()

if __name__ == "__main__":
    main()
